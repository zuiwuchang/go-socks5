// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb.proto

It has these top-level messages:
	Channel
	Connect
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Channel struct {
	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (m *Channel) String() string            { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Channel) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Connect struct {
	Addr string `protobuf:"bytes,1,opt,name=Addr" json:"Addr,omitempty"`
	Pwd  string `protobuf:"bytes,2,opt,name=Pwd" json:"Pwd,omitempty"`
}

func (m *Connect) Reset()                    { *m = Connect{} }
func (m *Connect) String() string            { return proto.CompactTextString(m) }
func (*Connect) ProtoMessage()               {}
func (*Connect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Connect) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Connect) GetPwd() string {
	if m != nil {
		return m.Pwd
	}
	return ""
}

func init() {
	proto.RegisterType((*Channel)(nil), "pb.Channel")
	proto.RegisterType((*Connect)(nil), "pb.Connect")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Socks5 service

type Socks5Client interface {
	MakeChannel(ctx context.Context, opts ...grpc.CallOption) (Socks5_MakeChannelClient, error)
}

type socks5Client struct {
	cc *grpc.ClientConn
}

func NewSocks5Client(cc *grpc.ClientConn) Socks5Client {
	return &socks5Client{cc}
}

func (c *socks5Client) MakeChannel(ctx context.Context, opts ...grpc.CallOption) (Socks5_MakeChannelClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Socks5_serviceDesc.Streams[0], c.cc, "/pb.Socks5/MakeChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &socks5MakeChannelClient{stream}
	return x, nil
}

type Socks5_MakeChannelClient interface {
	Send(*Channel) error
	Recv() (*Channel, error)
	grpc.ClientStream
}

type socks5MakeChannelClient struct {
	grpc.ClientStream
}

func (x *socks5MakeChannelClient) Send(m *Channel) error {
	return x.ClientStream.SendMsg(m)
}

func (x *socks5MakeChannelClient) Recv() (*Channel, error) {
	m := new(Channel)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Socks5 service

type Socks5Server interface {
	MakeChannel(Socks5_MakeChannelServer) error
}

func RegisterSocks5Server(s *grpc.Server, srv Socks5Server) {
	s.RegisterService(&_Socks5_serviceDesc, srv)
}

func _Socks5_MakeChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Socks5Server).MakeChannel(&socks5MakeChannelServer{stream})
}

type Socks5_MakeChannelServer interface {
	Send(*Channel) error
	Recv() (*Channel, error)
	grpc.ServerStream
}

type socks5MakeChannelServer struct {
	grpc.ServerStream
}

func (x *socks5MakeChannelServer) Send(m *Channel) error {
	return x.ServerStream.SendMsg(m)
}

func (x *socks5MakeChannelServer) Recv() (*Channel, error) {
	m := new(Channel)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Socks5_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Socks5",
	HandlerType: (*Socks5Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MakeChannel",
			Handler:       _Socks5_MakeChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb.proto",
}

func init() { proto.RegisterFile("pb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x28, 0x48, 0xd2, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x92, 0xe5, 0x62, 0x77, 0xce, 0x48, 0xcc,
	0xcb, 0x4b, 0xcd, 0x11, 0x12, 0xe2, 0x62, 0x71, 0x49, 0x2c, 0x49, 0x94, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x09, 0x02, 0xb3, 0x95, 0xf4, 0xb9, 0xd8, 0x9d, 0xf3, 0xf3, 0xf2, 0x52, 0x93, 0x4b, 0x40,
	0xd2, 0x8e, 0x29, 0x29, 0x45, 0x60, 0x69, 0xce, 0x20, 0x30, 0x5b, 0x48, 0x80, 0x8b, 0x39, 0xa0,
	0x3c, 0x45, 0x82, 0x09, 0x2c, 0x04, 0x62, 0x1a, 0x99, 0x73, 0xb1, 0x05, 0xe7, 0x27, 0x67, 0x17,
	0x9b, 0x0a, 0xe9, 0x72, 0x71, 0xfb, 0x26, 0x66, 0xa7, 0xc2, 0x4c, 0xe7, 0xd6, 0x2b, 0x48, 0xd2,
	0x83, 0x72, 0xa4, 0x90, 0x39, 0x4a, 0x0c, 0x1a, 0x8c, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0x37, 0x19,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x07, 0xf4, 0x1e, 0x3f, 0x9f, 0x00, 0x00, 0x00,
}
